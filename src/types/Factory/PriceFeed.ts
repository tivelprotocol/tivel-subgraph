// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SetIntegrations extends ethereum.Event {
  get params(): SetIntegrations__Params {
    return new SetIntegrations__Params(this);
  }
}

export class SetIntegrations__Params {
  _event: SetIntegrations;

  constructor(event: SetIntegrations) {
    this._event = event;
  }

  get integrations(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class SetManager extends ethereum.Event {
  get params(): SetManager__Params {
    return new SetManager__Params(this);
  }
}

export class SetManager__Params {
  _event: SetManager;

  constructor(event: SetManager) {
    this._event = event;
  }

  get manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PriceFeed__getPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getHighest(): BigInt {
    return this.value0;
  }

  getLowest(): BigInt {
    return this.value1;
  }
}

export class PriceFeed extends ethereum.SmartContract {
  static bind(address: Address): PriceFeed {
    return new PriceFeed("PriceFeed", address);
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHighestPrice(_baseToken: Address, _quoteToken: Address): BigInt {
    let result = super.call(
      "getHighestPrice",
      "getHighestPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getHighestPrice(
    _baseToken: Address,
    _quoteToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHighestPrice",
      "getHighestPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLowestPrice(_baseToken: Address, _quoteToken: Address): BigInt {
    let result = super.call(
      "getLowestPrice",
      "getLowestPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLowestPrice(
    _baseToken: Address,
    _quoteToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLowestPrice",
      "getLowestPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(
    _baseToken: Address,
    _quoteToken: Address
  ): PriceFeed__getPriceResult {
    let result = super.call(
      "getPrice",
      "getPrice(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );

    return new PriceFeed__getPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPrice(
    _baseToken: Address,
    _quoteToken: Address
  ): ethereum.CallResult<PriceFeed__getPriceResult> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_baseToken),
        ethereum.Value.fromAddress(_quoteToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceFeed__getPriceResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  integrations(param0: BigInt): Address {
    let result = super.call("integrations", "integrations(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_integrations(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "integrations",
      "integrations(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetIntegrationsCall extends ethereum.Call {
  get inputs(): SetIntegrationsCall__Inputs {
    return new SetIntegrationsCall__Inputs(this);
  }

  get outputs(): SetIntegrationsCall__Outputs {
    return new SetIntegrationsCall__Outputs(this);
  }
}

export class SetIntegrationsCall__Inputs {
  _call: SetIntegrationsCall;

  constructor(call: SetIntegrationsCall) {
    this._call = call;
  }

  get _integrations(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetIntegrationsCall__Outputs {
  _call: SetIntegrationsCall;

  constructor(call: SetIntegrationsCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}
