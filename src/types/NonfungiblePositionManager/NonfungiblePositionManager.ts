// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddDecreaseLiquidityRequest extends ethereum.Event {
  get params(): AddDecreaseLiquidityRequest__Params {
    return new AddDecreaseLiquidityRequest__Params(this);
  }
}

export class AddDecreaseLiquidityRequest__Params {
  _event: AddDecreaseLiquidityRequest;

  constructor(event: AddDecreaseLiquidityRequest) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get requestIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DecreaseLiquidity extends ethereum.Event {
  get params(): DecreaseLiquidity__Params {
    return new DecreaseLiquidity__Params(this);
  }
}

export class DecreaseLiquidity__Params {
  _event: DecreaseLiquidity;

  constructor(event: DecreaseLiquidity) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IncreaseLiquidity extends ethereum.Event {
  get params(): IncreaseLiquidity__Params {
    return new IncreaseLiquidity__Params(this);
  }
}

export class IncreaseLiquidity__Params {
  _event: IncreaseLiquidity;

  constructor(event: IncreaseLiquidity) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NonfungiblePositionManager__aggregateResult {
  value0: BigInt;
  value1: Array<Bytes>;

  constructor(value0: BigInt, value1: Array<Bytes>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytesArray(this.value1));
    return map;
  }

  getBlockNumber(): BigInt {
    return this.value0;
  }

  getReturnData(): Array<Bytes> {
    return this.value1;
  }
}

export class NonfungiblePositionManager__aggregateInput_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__blockAndAggregateResult {
  value0: BigInt;
  value1: Bytes;
  value2: Array<
    NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct
  >;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: Array<
      NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct
    >
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    return map;
  }

  getBlockNumber(): BigInt {
    return this.value0;
  }

  getBlockHash(): Bytes {
    return this.value1;
  }

  getReturnData(): Array<
    NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct
  > {
    return this.value2;
  }
}

export class NonfungiblePositionManager__blockAndAggregateInput_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__positionsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getNonce(): BigInt {
    return this.value0;
  }

  getOperator(): Address {
    return this.value1;
  }

  getToken(): Address {
    return this.value2;
  }

  getLiquidity(): BigInt {
    return this.value3;
  }

  getWithdrawingLiquidity(): BigInt {
    return this.value4;
  }

  getClaimableFee(): BigInt {
    return this.value5;
  }
}

export class NonfungiblePositionManager__tryAggregateResultReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__tryAggregateInput_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager__tryBlockAndAggregateResult {
  value0: BigInt;
  value1: Bytes;
  value2: Array<
    NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct
  >;

  constructor(
    value0: BigInt,
    value1: Bytes,
    value2: Array<
      NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct
    >
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromTupleArray(this.value2));
    return map;
  }

  getBlockNumber(): BigInt {
    return this.value0;
  }

  getBlockHash(): Bytes {
    return this.value1;
  }

  getReturnData(): Array<
    NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct
  > {
    return this.value2;
  }
}

export class NonfungiblePositionManager__tryBlockAndAggregateInput_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class NonfungiblePositionManager extends ethereum.SmartContract {
  static bind(address: Address): NonfungiblePositionManager {
    return new NonfungiblePositionManager(
      "NonfungiblePositionManager",
      address
    );
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WETH9(): Address {
    let result = super.call("WETH9", "WETH9():(address)", []);

    return result[0].toAddress();
  }

  try_WETH9(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH9", "WETH9():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aggregate(
    _calls: Array<NonfungiblePositionManager__aggregateInput_callsStruct>
  ): NonfungiblePositionManager__aggregateResult {
    let result = super.call(
      "aggregate",
      "aggregate((address,bytes)[]):(uint256,bytes[])",
      [ethereum.Value.fromTupleArray(_calls)]
    );

    return new NonfungiblePositionManager__aggregateResult(
      result[0].toBigInt(),
      result[1].toBytesArray()
    );
  }

  try_aggregate(
    _calls: Array<NonfungiblePositionManager__aggregateInput_callsStruct>
  ): ethereum.CallResult<NonfungiblePositionManager__aggregateResult> {
    let result = super.tryCall(
      "aggregate",
      "aggregate((address,bytes)[]):(uint256,bytes[])",
      [ethereum.Value.fromTupleArray(_calls)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NonfungiblePositionManager__aggregateResult(
        value[0].toBigInt(),
        value[1].toBytesArray()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blockAndAggregate(
    _calls: Array<
      NonfungiblePositionManager__blockAndAggregateInput_callsStruct
    >
  ): NonfungiblePositionManager__blockAndAggregateResult {
    let result = super.call(
      "blockAndAggregate",
      "blockAndAggregate((address,bytes)[]):(uint256,bytes32,(bool,bytes)[])",
      [ethereum.Value.fromTupleArray(_calls)]
    );

    return new NonfungiblePositionManager__blockAndAggregateResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toTupleArray<
        NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct
      >()
    );
  }

  try_blockAndAggregate(
    _calls: Array<
      NonfungiblePositionManager__blockAndAggregateInput_callsStruct
    >
  ): ethereum.CallResult<NonfungiblePositionManager__blockAndAggregateResult> {
    let result = super.tryCall(
      "blockAndAggregate",
      "blockAndAggregate((address,bytes)[]):(uint256,bytes32,(bool,bytes)[])",
      [ethereum.Value.fromTupleArray(_calls)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NonfungiblePositionManager__blockAndAggregateResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toTupleArray<
          NonfungiblePositionManager__blockAndAggregateResultReturnDataStruct
        >()
      )
    );
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBlockHash(_blockNumber: BigInt): Bytes {
    let result = super.call("getBlockHash", "getBlockHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(_blockNumber)
    ]);

    return result[0].toBytes();
  }

  try_getBlockHash(_blockNumber: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getBlockHash",
      "getBlockHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBlockNumber(): BigInt {
    let result = super.call("getBlockNumber", "getBlockNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumber",
      "getBlockNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBlockCoinbase(): Address {
    let result = super.call(
      "getCurrentBlockCoinbase",
      "getCurrentBlockCoinbase():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCurrentBlockCoinbase(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurrentBlockCoinbase",
      "getCurrentBlockCoinbase():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentBlockDifficulty(): BigInt {
    let result = super.call(
      "getCurrentBlockDifficulty",
      "getCurrentBlockDifficulty():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentBlockDifficulty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBlockDifficulty",
      "getCurrentBlockDifficulty():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBlockGasLimit(): BigInt {
    let result = super.call(
      "getCurrentBlockGasLimit",
      "getCurrentBlockGasLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentBlockGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBlockGasLimit",
      "getCurrentBlockGasLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentBlockTimestamp(): BigInt {
    let result = super.call(
      "getCurrentBlockTimestamp",
      "getCurrentBlockTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentBlockTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentBlockTimestamp",
      "getCurrentBlockTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthBalance(_addr: Address): BigInt {
    let result = super.call(
      "getEthBalance",
      "getEthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBigInt();
  }

  try_getEthBalance(_addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthBalance",
      "getEthBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastBlockHash(): Bytes {
    let result = super.call(
      "getLastBlockHash",
      "getLastBlockHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getLastBlockHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getLastBlockHash",
      "getLastBlockHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolDeployer(): Address {
    let result = super.call("poolDeployer", "poolDeployer():(address)", []);

    return result[0].toAddress();
  }

  try_poolDeployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolDeployer", "poolDeployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(_tokenId: BigInt): NonfungiblePositionManager__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256):(uint96,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new NonfungiblePositionManager__positionsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_positions(
    _tokenId: BigInt
  ): ethereum.CallResult<NonfungiblePositionManager__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):(uint96,address,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NonfungiblePositionManager__positionsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tryAggregate(
    _requireSuccess: boolean,
    _calls: Array<NonfungiblePositionManager__tryAggregateInput_callsStruct>
  ): Array<NonfungiblePositionManager__tryAggregateResultReturnDataStruct> {
    let result = super.call(
      "tryAggregate",
      "tryAggregate(bool,(address,bytes)[]):((bool,bytes)[])",
      [
        ethereum.Value.fromBoolean(_requireSuccess),
        ethereum.Value.fromTupleArray(_calls)
      ]
    );

    return result[0].toTupleArray<
      NonfungiblePositionManager__tryAggregateResultReturnDataStruct
    >();
  }

  try_tryAggregate(
    _requireSuccess: boolean,
    _calls: Array<NonfungiblePositionManager__tryAggregateInput_callsStruct>
  ): ethereum.CallResult<
    Array<NonfungiblePositionManager__tryAggregateResultReturnDataStruct>
  > {
    let result = super.tryCall(
      "tryAggregate",
      "tryAggregate(bool,(address,bytes)[]):((bool,bytes)[])",
      [
        ethereum.Value.fromBoolean(_requireSuccess),
        ethereum.Value.fromTupleArray(_calls)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NonfungiblePositionManager__tryAggregateResultReturnDataStruct
      >()
    );
  }

  tryBlockAndAggregate(
    _requireSuccess: boolean,
    _calls: Array<
      NonfungiblePositionManager__tryBlockAndAggregateInput_callsStruct
    >
  ): NonfungiblePositionManager__tryBlockAndAggregateResult {
    let result = super.call(
      "tryBlockAndAggregate",
      "tryBlockAndAggregate(bool,(address,bytes)[]):(uint256,bytes32,(bool,bytes)[])",
      [
        ethereum.Value.fromBoolean(_requireSuccess),
        ethereum.Value.fromTupleArray(_calls)
      ]
    );

    return new NonfungiblePositionManager__tryBlockAndAggregateResult(
      result[0].toBigInt(),
      result[1].toBytes(),
      result[2].toTupleArray<
        NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct
      >()
    );
  }

  try_tryBlockAndAggregate(
    _requireSuccess: boolean,
    _calls: Array<
      NonfungiblePositionManager__tryBlockAndAggregateInput_callsStruct
    >
  ): ethereum.CallResult<
    NonfungiblePositionManager__tryBlockAndAggregateResult
  > {
    let result = super.tryCall(
      "tryBlockAndAggregate",
      "tryBlockAndAggregate(bool,(address,bytes)[]):(uint256,bytes32,(bool,bytes)[])",
      [
        ethereum.Value.fromBoolean(_requireSuccess),
        ethereum.Value.fromTupleArray(_calls)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NonfungiblePositionManager__tryBlockAndAggregateResult(
        value[0].toBigInt(),
        value[1].toBytes(),
        value[2].toTupleArray<
          NonfungiblePositionManager__tryBlockAndAggregateResultReturnDataStruct
        >()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _WETH9(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenDescriptor_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDecreaseLiquidityRequestCall extends ethereum.Call {
  get inputs(): AddDecreaseLiquidityRequestCall__Inputs {
    return new AddDecreaseLiquidityRequestCall__Inputs(this);
  }

  get outputs(): AddDecreaseLiquidityRequestCall__Outputs {
    return new AddDecreaseLiquidityRequestCall__Outputs(this);
  }
}

export class AddDecreaseLiquidityRequestCall__Inputs {
  _call: AddDecreaseLiquidityRequestCall;

  constructor(call: AddDecreaseLiquidityRequestCall) {
    this._call = call;
  }

  get _params(): AddDecreaseLiquidityRequestCall_paramsStruct {
    return changetype<AddDecreaseLiquidityRequestCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddDecreaseLiquidityRequestCall__Outputs {
  _call: AddDecreaseLiquidityRequestCall;

  constructor(call: AddDecreaseLiquidityRequestCall) {
    this._call = call;
  }
}

export class AddDecreaseLiquidityRequestCall_paramsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }
}

export class AggregateCall extends ethereum.Call {
  get inputs(): AggregateCall__Inputs {
    return new AggregateCall__Inputs(this);
  }

  get outputs(): AggregateCall__Outputs {
    return new AggregateCall__Outputs(this);
  }
}

export class AggregateCall__Inputs {
  _call: AggregateCall;

  constructor(call: AggregateCall) {
    this._call = call;
  }

  get _calls(): Array<AggregateCall_callsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AggregateCall_callsStruct
    >();
  }
}

export class AggregateCall__Outputs {
  _call: AggregateCall;

  constructor(call: AggregateCall) {
    this._call = call;
  }

  get blockNumber(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get returnData(): Array<Bytes> {
    return this._call.outputValues[1].value.toBytesArray();
  }
}

export class AggregateCall_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BlockAndAggregateCall extends ethereum.Call {
  get inputs(): BlockAndAggregateCall__Inputs {
    return new BlockAndAggregateCall__Inputs(this);
  }

  get outputs(): BlockAndAggregateCall__Outputs {
    return new BlockAndAggregateCall__Outputs(this);
  }
}

export class BlockAndAggregateCall__Inputs {
  _call: BlockAndAggregateCall;

  constructor(call: BlockAndAggregateCall) {
    this._call = call;
  }

  get _calls(): Array<BlockAndAggregateCall_callsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BlockAndAggregateCall_callsStruct
    >();
  }
}

export class BlockAndAggregateCall__Outputs {
  _call: BlockAndAggregateCall;

  constructor(call: BlockAndAggregateCall) {
    this._call = call;
  }

  get blockNumber(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get blockHash(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }

  get returnData(): Array<BlockAndAggregateCallReturnDataStruct> {
    return this._call.outputValues[2].value.toTupleArray<
      BlockAndAggregateCallReturnDataStruct
    >();
  }
}

export class BlockAndAggregateCall_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class BlockAndAggregateCallReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnCallbackCall extends ethereum.Call {
  get inputs(): BurnCallbackCall__Inputs {
    return new BurnCallbackCall__Inputs(this);
  }

  get outputs(): BurnCallbackCall__Outputs {
    return new BurnCallbackCall__Outputs(this);
  }
}

export class BurnCallbackCall__Inputs {
  _call: BurnCallbackCall;

  constructor(call: BurnCallbackCall) {
    this._call = call;
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class BurnCallbackCall__Outputs {
  _call: BurnCallbackCall;

  constructor(call: BurnCallbackCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _params(): CollectCall_paramsStruct {
    return changetype<CollectCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectCall_paramsStruct extends ethereum.Tuple {
  get tokenIds(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get to(): Address {
    return this[1].toAddress();
  }
}

export class IncreaseLiquidityCall extends ethereum.Call {
  get inputs(): IncreaseLiquidityCall__Inputs {
    return new IncreaseLiquidityCall__Inputs(this);
  }

  get outputs(): IncreaseLiquidityCall__Outputs {
    return new IncreaseLiquidityCall__Outputs(this);
  }
}

export class IncreaseLiquidityCall__Inputs {
  _call: IncreaseLiquidityCall;

  constructor(call: IncreaseLiquidityCall) {
    this._call = call;
  }

  get _params(): IncreaseLiquidityCall_paramsStruct {
    return changetype<IncreaseLiquidityCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class IncreaseLiquidityCall__Outputs {
  _call: IncreaseLiquidityCall;

  constructor(call: IncreaseLiquidityCall) {
    this._call = call;
  }
}

export class IncreaseLiquidityCall_paramsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _params(): MintCall_paramsStruct {
    return changetype<MintCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall_paramsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get to(): Address {
    return this[2].toAddress();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }
}

export class MintCallbackCall extends ethereum.Call {
  get inputs(): MintCallbackCall__Inputs {
    return new MintCallbackCall__Inputs(this);
  }

  get outputs(): MintCallbackCall__Outputs {
    return new MintCallbackCall__Outputs(this);
  }
}

export class MintCallbackCall__Inputs {
  _call: MintCallbackCall;

  constructor(call: MintCallbackCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintCallbackCall__Outputs {
  _call: MintCallbackCall;

  constructor(call: MintCallbackCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RefundETHCall extends ethereum.Call {
  get inputs(): RefundETHCall__Inputs {
    return new RefundETHCall__Inputs(this);
  }

  get outputs(): RefundETHCall__Outputs {
    return new RefundETHCall__Outputs(this);
  }
}

export class RefundETHCall__Inputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class RefundETHCall__Outputs {
  _call: RefundETHCall;

  constructor(call: RefundETHCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SelfPermitCall extends ethereum.Call {
  get inputs(): SelfPermitCall__Inputs {
    return new SelfPermitCall__Inputs(this);
  }

  get outputs(): SelfPermitCall__Outputs {
    return new SelfPermitCall__Outputs(this);
  }
}

export class SelfPermitCall__Inputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitCall__Outputs {
  _call: SelfPermitCall;

  constructor(call: SelfPermitCall) {
    this._call = call;
  }
}

export class SelfPermitAllowedCall extends ethereum.Call {
  get inputs(): SelfPermitAllowedCall__Inputs {
    return new SelfPermitAllowedCall__Inputs(this);
  }

  get outputs(): SelfPermitAllowedCall__Outputs {
    return new SelfPermitAllowedCall__Outputs(this);
  }
}

export class SelfPermitAllowedCall__Inputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitAllowedCall__Outputs {
  _call: SelfPermitAllowedCall;

  constructor(call: SelfPermitAllowedCall) {
    this._call = call;
  }
}

export class SelfPermitAllowedIfNecessaryCall extends ethereum.Call {
  get inputs(): SelfPermitAllowedIfNecessaryCall__Inputs {
    return new SelfPermitAllowedIfNecessaryCall__Inputs(this);
  }

  get outputs(): SelfPermitAllowedIfNecessaryCall__Outputs {
    return new SelfPermitAllowedIfNecessaryCall__Outputs(this);
  }
}

export class SelfPermitAllowedIfNecessaryCall__Inputs {
  _call: SelfPermitAllowedIfNecessaryCall;

  constructor(call: SelfPermitAllowedIfNecessaryCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitAllowedIfNecessaryCall__Outputs {
  _call: SelfPermitAllowedIfNecessaryCall;

  constructor(call: SelfPermitAllowedIfNecessaryCall) {
    this._call = call;
  }
}

export class SelfPermitIfNecessaryCall extends ethereum.Call {
  get inputs(): SelfPermitIfNecessaryCall__Inputs {
    return new SelfPermitIfNecessaryCall__Inputs(this);
  }

  get outputs(): SelfPermitIfNecessaryCall__Outputs {
    return new SelfPermitIfNecessaryCall__Outputs(this);
  }
}

export class SelfPermitIfNecessaryCall__Inputs {
  _call: SelfPermitIfNecessaryCall;

  constructor(call: SelfPermitIfNecessaryCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SelfPermitIfNecessaryCall__Outputs {
  _call: SelfPermitIfNecessaryCall;

  constructor(call: SelfPermitIfNecessaryCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetTokenDescriptorCall extends ethereum.Call {
  get inputs(): SetTokenDescriptorCall__Inputs {
    return new SetTokenDescriptorCall__Inputs(this);
  }

  get outputs(): SetTokenDescriptorCall__Outputs {
    return new SetTokenDescriptorCall__Outputs(this);
  }
}

export class SetTokenDescriptorCall__Inputs {
  _call: SetTokenDescriptorCall;

  constructor(call: SetTokenDescriptorCall) {
    this._call = call;
  }

  get _tokenDescriptor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenDescriptorCall__Outputs {
  _call: SetTokenDescriptorCall;

  constructor(call: SetTokenDescriptorCall) {
    this._call = call;
  }
}

export class SweepTokenCall extends ethereum.Call {
  get inputs(): SweepTokenCall__Inputs {
    return new SweepTokenCall__Inputs(this);
  }

  get outputs(): SweepTokenCall__Outputs {
    return new SweepTokenCall__Outputs(this);
  }
}

export class SweepTokenCall__Inputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountMinimum(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SweepTokenCall__Outputs {
  _call: SweepTokenCall;

  constructor(call: SweepTokenCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TryAggregateCall extends ethereum.Call {
  get inputs(): TryAggregateCall__Inputs {
    return new TryAggregateCall__Inputs(this);
  }

  get outputs(): TryAggregateCall__Outputs {
    return new TryAggregateCall__Outputs(this);
  }
}

export class TryAggregateCall__Inputs {
  _call: TryAggregateCall;

  constructor(call: TryAggregateCall) {
    this._call = call;
  }

  get _requireSuccess(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _calls(): Array<TryAggregateCall_callsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      TryAggregateCall_callsStruct
    >();
  }
}

export class TryAggregateCall__Outputs {
  _call: TryAggregateCall;

  constructor(call: TryAggregateCall) {
    this._call = call;
  }

  get returnData(): Array<TryAggregateCallReturnDataStruct> {
    return this._call.outputValues[0].value.toTupleArray<
      TryAggregateCallReturnDataStruct
    >();
  }
}

export class TryAggregateCall_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class TryAggregateCallReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class TryBlockAndAggregateCall extends ethereum.Call {
  get inputs(): TryBlockAndAggregateCall__Inputs {
    return new TryBlockAndAggregateCall__Inputs(this);
  }

  get outputs(): TryBlockAndAggregateCall__Outputs {
    return new TryBlockAndAggregateCall__Outputs(this);
  }
}

export class TryBlockAndAggregateCall__Inputs {
  _call: TryBlockAndAggregateCall;

  constructor(call: TryBlockAndAggregateCall) {
    this._call = call;
  }

  get _requireSuccess(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _calls(): Array<TryBlockAndAggregateCall_callsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      TryBlockAndAggregateCall_callsStruct
    >();
  }
}

export class TryBlockAndAggregateCall__Outputs {
  _call: TryBlockAndAggregateCall;

  constructor(call: TryBlockAndAggregateCall) {
    this._call = call;
  }

  get blockNumber(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get blockHash(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }

  get returnData(): Array<TryBlockAndAggregateCallReturnDataStruct> {
    return this._call.outputValues[2].value.toTupleArray<
      TryBlockAndAggregateCallReturnDataStruct
    >();
  }
}

export class TryBlockAndAggregateCall_callsStruct extends ethereum.Tuple {
  get target(): Address {
    return this[0].toAddress();
  }

  get callData(): Bytes {
    return this[1].toBytes();
  }
}

export class TryBlockAndAggregateCallReturnDataStruct extends ethereum.Tuple {
  get success(): boolean {
    return this[0].toBoolean();
  }

  get returnData(): Bytes {
    return this[1].toBytes();
  }
}

export class UnwrapWETH9Call extends ethereum.Call {
  get inputs(): UnwrapWETH9Call__Inputs {
    return new UnwrapWETH9Call__Inputs(this);
  }

  get outputs(): UnwrapWETH9Call__Outputs {
    return new UnwrapWETH9Call__Outputs(this);
  }
}

export class UnwrapWETH9Call__Inputs {
  _call: UnwrapWETH9Call;

  constructor(call: UnwrapWETH9Call) {
    this._call = call;
  }

  get amountMinimum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnwrapWETH9Call__Outputs {
  _call: UnwrapWETH9Call;

  constructor(call: UnwrapWETH9Call) {
    this._call = call;
  }
}
