// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Close extends ethereum.Event {
  get params(): Close__Params {
    return new Close__Params(this);
  }
}

export class Close__Params {
  _event: Close;

  constructor(event: Close) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get baseToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get closer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CloseManuallyStep1 extends ethereum.Event {
  get params(): CloseManuallyStep1__Params {
    return new CloseManuallyStep1__Params(this);
  }
}

export class CloseManuallyStep1__Params {
  _event: CloseManuallyStep1;

  constructor(event: CloseManuallyStep1) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get executor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Open extends ethereum.Event {
  get params(): Open__Params {
    return new Open__Params(this);
  }
}

export class Open__Params {
  _event: Open;

  constructor(event: Open) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get baseToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get baseAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get quoteAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class Rollback extends ethereum.Event {
  get params(): Rollback__Params {
    return new Rollback__Params(this);
  }
}

export class Rollback__Params {
  _event: Rollback;

  constructor(event: Rollback) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get rollbacker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get serviceToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get serviceFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SetBaseToken extends ethereum.Event {
  get params(): SetBaseToken__Params {
    return new SetBaseToken__Params(this);
  }
}

export class SetBaseToken__Params {
  _event: SetBaseToken;

  constructor(event: SetBaseToken) {
    this._event = event;
  }

  get baseToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tradeable(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SetInterest extends ethereum.Event {
  get params(): SetInterest__Params {
    return new SetInterest__Params(this);
  }
}

export class SetInterest__Params {
  _event: SetInterest;

  constructor(event: SetInterest) {
    this._event = event;
  }

  get newInterest(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetMaxOpenInterest extends ethereum.Event {
  get params(): SetMaxOpenInterest__Params {
    return new SetMaxOpenInterest__Params(this);
  }
}

export class SetMaxOpenInterest__Params {
  _event: SetMaxOpenInterest;

  constructor(event: SetMaxOpenInterest) {
    this._event = event;
  }

  get newMaxOpenInterest(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateBaseReserve extends ethereum.Event {
  get params(): UpdateBaseReserve__Params {
    return new UpdateBaseReserve__Params(this);
  }
}

export class UpdateBaseReserve__Params {
  _event: UpdateBaseReserve;

  constructor(event: UpdateBaseReserve) {
    this._event = event;
  }

  get baseToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReserve(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateCollateralAmount extends ethereum.Event {
  get params(): UpdateCollateralAmount__Params {
    return new UpdateCollateralAmount__Params(this);
  }
}

export class UpdateCollateralAmount__Params {
  _event: UpdateCollateralAmount;

  constructor(event: UpdateCollateralAmount) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newCollateralLiqPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get serviceToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get serviceFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpdateCollateralReserve extends ethereum.Event {
  get params(): UpdateCollateralReserve__Params {
    return new UpdateCollateralReserve__Params(this);
  }
}

export class UpdateCollateralReserve__Params {
  _event: UpdateCollateralReserve;

  constructor(event: UpdateCollateralReserve) {
    this._event = event;
  }

  get collateral(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newReserve(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateDeadline extends ethereum.Event {
  get params(): UpdateDeadline__Params {
    return new UpdateDeadline__Params(this);
  }
}

export class UpdateDeadline__Params {
  _event: UpdateDeadline;

  constructor(event: UpdateDeadline) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionKey(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get baseToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get newDeadline(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get serviceToken(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get serviceFee(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class UpdateFee extends ethereum.Event {
  get params(): UpdateFee__Params {
    return new UpdateFee__Params(this);
  }
}

export class UpdateFee__Params {
  _event: UpdateFee;

  constructor(event: UpdateFee) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateProtocolFee extends ethereum.Event {
  get params(): UpdateProtocolFee__Params {
    return new UpdateProtocolFee__Params(this);
  }
}

export class UpdateProtocolFee__Params {
  _event: UpdateProtocolFee;

  constructor(event: UpdateProtocolFee) {
    this._event = event;
  }

  get newProtocolFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateQuoteInDebt extends ethereum.Event {
  get params(): UpdateQuoteInDebt__Params {
    return new UpdateQuoteInDebt__Params(this);
  }
}

export class UpdateQuoteInDebt__Params {
  _event: UpdateQuoteInDebt;

  constructor(event: UpdateQuoteInDebt) {
    this._event = event;
  }

  get newQuoteInDebt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateQuoteReserve extends ethereum.Event {
  get params(): UpdateQuoteReserve__Params {
    return new UpdateQuoteReserve__Params(this);
  }
}

export class UpdateQuoteReserve__Params {
  _event: UpdateQuoteReserve;

  constructor(event: UpdateQuoteReserve) {
    this._event = event;
  }

  get newQuoteReserve(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateWithdrawingLiquidity extends ethereum.Event {
  get params(): UpdateWithdrawingLiquidity__Params {
    return new UpdateWithdrawingLiquidity__Params(this);
  }
}

export class UpdateWithdrawingLiquidity__Params {
  _event: UpdateWithdrawingLiquidity;

  constructor(event: UpdateWithdrawingLiquidity) {
    this._event = event;
  }

  get newWithdrawingLiquidity(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Pool__liquidityPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getFeeDebt(): BigInt {
    return this.value1;
  }

  getPendingFee(): BigInt {
    return this.value2;
  }

  getWithdrawingLiquidity(): BigInt {
    return this.value3;
  }
}

export class Pool__openInput_paramsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get baseToken(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get collateral(): Address {
    return this[3].toAddress();
  }

  get baseAmount(): BigInt {
    return this[4].toBigInt();
  }

  get quoteAmount(): BigInt {
    return this[5].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[8].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[9].toBigInt();
  }
}

export class Pool__updateCollateralAmountInput_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  accFee(): BigInt {
    let result = super.call("accFee", "accFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("accFee", "accFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accFeePerShare(): BigInt {
    let result = super.call("accFeePerShare", "accFeePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accFeePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accFeePerShare",
      "accFeePerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accProtocolFee(): BigInt {
    let result = super.call("accProtocolFee", "accProtocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_accProtocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accProtocolFee",
      "accProtocolFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addBurnRequest(_liquidity: BigInt, _to: Address, _data: Bytes): BigInt {
    let result = super.call(
      "addBurnRequest",
      "addBurnRequest(uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBigInt();
  }

  try_addBurnRequest(
    _liquidity: BigInt,
    _to: Address,
    _data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addBurnRequest",
      "addBurnRequest(uint256,address,bytes):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_liquidity),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableLiquidity(): BigInt {
    let result = super.call(
      "availableLiquidity",
      "availableLiquidity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableLiquidity",
      "availableLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseReserve(param0: Address): BigInt {
    let result = super.call("baseReserve", "baseReserve(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_baseReserve(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseReserve",
      "baseReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableFee(_owner: Address): BigInt {
    let result = super.call("claimableFee", "claimableFee(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_claimableFee(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableFee",
      "claimableFee(address):(uint256)",
      [ethereum.Value.fromAddress(_owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralReserve(param0: Address): BigInt {
    let result = super.call(
      "collateralReserve",
      "collateralReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_collateralReserve(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralReserve",
      "collateralReserve(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interest(): BigInt {
    let result = super.call("interest", "interest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interest", "interest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPosition(param0: Address): Pool__liquidityPositionResult {
    let result = super.call(
      "liquidityPosition",
      "liquidityPosition(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Pool__liquidityPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_liquidityPosition(
    param0: Address
  ): ethereum.CallResult<Pool__liquidityPositionResult> {
    let result = super.tryCall(
      "liquidityPosition",
      "liquidityPosition(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__liquidityPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  maxOpenInterest(): BigInt {
    let result = super.call(
      "maxOpenInterest",
      "maxOpenInterest():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxOpenInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxOpenInterest",
      "maxOpenInterest():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  open(_params: Pool__openInput_paramsStruct): Bytes {
    let result = super.call(
      "open",
      "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBytes();
  }

  try_open(_params: Pool__openInput_paramsStruct): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "open",
      "open((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  openInterest(): BigInt {
    let result = super.call("openInterest", "openInterest():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openInterest(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openInterest", "openInterest():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionStorage(): Address {
    let result = super.call(
      "positionStorage",
      "positionStorage():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionStorage(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionStorage",
      "positionStorage():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  precision(): BigInt {
    let result = super.call("precision", "precision():(uint256)", []);

    return result[0].toBigInt();
  }

  try_precision(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("precision", "precision():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteInDebt(): BigInt {
    let result = super.call("quoteInDebt", "quoteInDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quoteInDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quoteInDebt", "quoteInDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteReserve(): BigInt {
    let result = super.call("quoteReserve", "quoteReserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quoteReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quoteReserve", "quoteReserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quoteToken(): Address {
    let result = super.call("quoteToken", "quoteToken():(address)", []);

    return result[0].toAddress();
  }

  try_quoteToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("quoteToken", "quoteToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tradeableBaseToken(param0: Address): boolean {
    let result = super.call(
      "tradeableBaseToken",
      "tradeableBaseToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_tradeableBaseToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "tradeableBaseToken",
      "tradeableBaseToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateCollateralAmount(
    _params: Pool__updateCollateralAmountInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "updateCollateralAmount",
      "updateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_updateCollateralAmount(
    _params: Pool__updateCollateralAmountInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCollateralAmount",
      "updateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalMonitor(): Address {
    let result = super.call(
      "withdrawalMonitor",
      "withdrawalMonitor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_withdrawalMonitor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawalMonitor",
      "withdrawalMonitor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawingLiquidity(): BigInt {
    let result = super.call(
      "withdrawingLiquidity",
      "withdrawingLiquidity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withdrawingLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawingLiquidity",
      "withdrawingLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddBurnRequestCall extends ethereum.Call {
  get inputs(): AddBurnRequestCall__Inputs {
    return new AddBurnRequestCall__Inputs(this);
  }

  get outputs(): AddBurnRequestCall__Outputs {
    return new AddBurnRequestCall__Outputs(this);
  }
}

export class AddBurnRequestCall__Inputs {
  _call: AddBurnRequestCall;

  constructor(call: AddBurnRequestCall) {
    this._call = call;
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddBurnRequestCall__Outputs {
  _call: AddBurnRequestCall;

  constructor(call: AddBurnRequestCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AvailLiquidityCall extends ethereum.Call {
  get inputs(): AvailLiquidityCall__Inputs {
    return new AvailLiquidityCall__Inputs(this);
  }

  get outputs(): AvailLiquidityCall__Outputs {
    return new AvailLiquidityCall__Outputs(this);
  }
}

export class AvailLiquidityCall__Inputs {
  _call: AvailLiquidityCall;

  constructor(call: AvailLiquidityCall) {
    this._call = call;
  }
}

export class AvailLiquidityCall__Outputs {
  _call: AvailLiquidityCall;

  constructor(call: AvailLiquidityCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _request(): BurnCall_requestStruct {
    return changetype<BurnCall_requestStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnCall_requestStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get to(): Address {
    return this[4].toAddress();
  }

  get data(): Bytes {
    return this[5].toBytes();
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _params(): CloseCall_paramsStruct {
    return changetype<CloseCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get data0(): Bytes {
    return this[1].toBytes();
  }

  get data1(): Bytes {
    return this[2].toBytes();
  }

  get closer(): Address {
    return this[3].toAddress();
  }
}

export class CloseManuallyStep1Call extends ethereum.Call {
  get inputs(): CloseManuallyStep1Call__Inputs {
    return new CloseManuallyStep1Call__Inputs(this);
  }

  get outputs(): CloseManuallyStep1Call__Outputs {
    return new CloseManuallyStep1Call__Outputs(this);
  }
}

export class CloseManuallyStep1Call__Inputs {
  _call: CloseManuallyStep1Call;

  constructor(call: CloseManuallyStep1Call) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _executor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseManuallyStep1Call__Outputs {
  _call: CloseManuallyStep1Call;

  constructor(call: CloseManuallyStep1Call) {
    this._call = call;
  }
}

export class CloseManuallyStep2Call extends ethereum.Call {
  get inputs(): CloseManuallyStep2Call__Inputs {
    return new CloseManuallyStep2Call__Inputs(this);
  }

  get outputs(): CloseManuallyStep2Call__Outputs {
    return new CloseManuallyStep2Call__Outputs(this);
  }
}

export class CloseManuallyStep2Call__Inputs {
  _call: CloseManuallyStep2Call;

  constructor(call: CloseManuallyStep2Call) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _baseValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _remainingCollateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _liquidationFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CloseManuallyStep2Call__Outputs {
  _call: CloseManuallyStep2Call;

  constructor(call: CloseManuallyStep2Call) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _quoteToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _interest(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _liquidity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class OpenCall extends ethereum.Call {
  get inputs(): OpenCall__Inputs {
    return new OpenCall__Inputs(this);
  }

  get outputs(): OpenCall__Outputs {
    return new OpenCall__Outputs(this);
  }
}

export class OpenCall__Inputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }

  get _params(): OpenCall_paramsStruct {
    return changetype<OpenCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class OpenCall__Outputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }

  get positionKey(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenCall_paramsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get baseToken(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get collateral(): Address {
    return this[3].toAddress();
  }

  get baseAmount(): BigInt {
    return this[4].toBigInt();
  }

  get quoteAmount(): BigInt {
    return this[5].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[8].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[9].toBigInt();
  }
}

export class RollbackCall extends ethereum.Call {
  get inputs(): RollbackCall__Inputs {
    return new RollbackCall__Inputs(this);
  }

  get outputs(): RollbackCall__Outputs {
    return new RollbackCall__Outputs(this);
  }
}

export class RollbackCall__Inputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }

  get _params(): RollbackCall_paramsStruct {
    return changetype<RollbackCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RollbackCall__Outputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }
}

export class RollbackCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get rollbacker(): Address {
    return this[1].toAddress();
  }

  get serviceToken(): Address {
    return this[2].toAddress();
  }

  get serviceFee(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetBaseTokensCall extends ethereum.Call {
  get inputs(): SetBaseTokensCall__Inputs {
    return new SetBaseTokensCall__Inputs(this);
  }

  get outputs(): SetBaseTokensCall__Outputs {
    return new SetBaseTokensCall__Outputs(this);
  }
}

export class SetBaseTokensCall__Inputs {
  _call: SetBaseTokensCall;

  constructor(call: SetBaseTokensCall) {
    this._call = call;
  }

  get _baseTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _tradeables(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetBaseTokensCall__Outputs {
  _call: SetBaseTokensCall;

  constructor(call: SetBaseTokensCall) {
    this._call = call;
  }
}

export class SetInterestCall extends ethereum.Call {
  get inputs(): SetInterestCall__Inputs {
    return new SetInterestCall__Inputs(this);
  }

  get outputs(): SetInterestCall__Outputs {
    return new SetInterestCall__Outputs(this);
  }
}

export class SetInterestCall__Inputs {
  _call: SetInterestCall;

  constructor(call: SetInterestCall) {
    this._call = call;
  }

  get _interest(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInterestCall__Outputs {
  _call: SetInterestCall;

  constructor(call: SetInterestCall) {
    this._call = call;
  }
}

export class SetMaxOpenInterestCall extends ethereum.Call {
  get inputs(): SetMaxOpenInterestCall__Inputs {
    return new SetMaxOpenInterestCall__Inputs(this);
  }

  get outputs(): SetMaxOpenInterestCall__Outputs {
    return new SetMaxOpenInterestCall__Outputs(this);
  }
}

export class SetMaxOpenInterestCall__Inputs {
  _call: SetMaxOpenInterestCall;

  constructor(call: SetMaxOpenInterestCall) {
    this._call = call;
  }

  get _maxOpenInterest(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxOpenInterestCall__Outputs {
  _call: SetMaxOpenInterestCall;

  constructor(call: SetMaxOpenInterestCall) {
    this._call = call;
  }
}

export class UpdateCollateralAmountCall extends ethereum.Call {
  get inputs(): UpdateCollateralAmountCall__Inputs {
    return new UpdateCollateralAmountCall__Inputs(this);
  }

  get outputs(): UpdateCollateralAmountCall__Outputs {
    return new UpdateCollateralAmountCall__Outputs(this);
  }
}

export class UpdateCollateralAmountCall__Inputs {
  _call: UpdateCollateralAmountCall;

  constructor(call: UpdateCollateralAmountCall) {
    this._call = call;
  }

  get _params(): UpdateCollateralAmountCall_paramsStruct {
    return changetype<UpdateCollateralAmountCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateCollateralAmountCall__Outputs {
  _call: UpdateCollateralAmountCall;

  constructor(call: UpdateCollateralAmountCall) {
    this._call = call;
  }

  get collateralLiqPrice(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCollateralAmountCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateDeadlineCall extends ethereum.Call {
  get inputs(): UpdateDeadlineCall__Inputs {
    return new UpdateDeadlineCall__Inputs(this);
  }

  get outputs(): UpdateDeadlineCall__Outputs {
    return new UpdateDeadlineCall__Outputs(this);
  }
}

export class UpdateDeadlineCall__Inputs {
  _call: UpdateDeadlineCall;

  constructor(call: UpdateDeadlineCall) {
    this._call = call;
  }

  get _params(): UpdateDeadlineCall_paramsStruct {
    return changetype<UpdateDeadlineCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateDeadlineCall__Outputs {
  _call: UpdateDeadlineCall;

  constructor(call: UpdateDeadlineCall) {
    this._call = call;
  }
}

export class UpdateDeadlineCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}
