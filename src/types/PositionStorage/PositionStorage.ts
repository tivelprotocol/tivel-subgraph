// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CloseManuallyStep1TradePosition extends ethereum.Event {
  get params(): CloseManuallyStep1TradePosition__Params {
    return new CloseManuallyStep1TradePosition__Params(this);
  }
}

export class CloseManuallyStep1TradePosition__Params {
  _event: CloseManuallyStep1TradePosition;

  constructor(event: CloseManuallyStep1TradePosition) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class CloseTradePosition extends ethereum.Event {
  get params(): CloseTradePosition__Params {
    return new CloseTradePosition__Params(this);
  }
}

export class CloseTradePosition__Params {
  _event: CloseTradePosition;

  constructor(event: CloseTradePosition) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get updater(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidationMark extends ethereum.Event {
  get params(): LiquidationMark__Params {
    return new LiquidationMark__Params(this);
  }
}

export class LiquidationMark__Params {
  _event: LiquidationMark;

  constructor(event: LiquidationMark) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OpenTradePosition extends ethereum.Event {
  get params(): OpenTradePosition__Params {
    return new OpenTradePosition__Params(this);
  }
}

export class OpenTradePosition__Params {
  _event: OpenTradePosition;

  constructor(event: OpenTradePosition) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class UpdateCollateralAmount extends ethereum.Event {
  get params(): UpdateCollateralAmount__Params {
    return new UpdateCollateralAmount__Params(this);
  }
}

export class UpdateCollateralAmount__Params {
  _event: UpdateCollateralAmount;

  constructor(event: UpdateCollateralAmount) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralLiqPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class UpdateDeadline extends ethereum.Event {
  get params(): UpdateDeadline__Params {
    return new UpdateDeadline__Params(this);
  }
}

export class UpdateDeadline__Params {
  _event: UpdateDeadline;

  constructor(event: UpdateDeadline) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newDeadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class UpdateTPnSLPrice extends ethereum.Event {
  get params(): UpdateTPnSLPrice__Params {
    return new UpdateTPnSLPrice__Params(this);
  }
}

export class UpdateTPnSLPrice__Params {
  _event: UpdateTPnSLPrice;

  constructor(event: UpdateTPnSLPrice) {
    this._event = event;
  }

  get positionKey(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get newTakeProfitPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newStoplossPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get updater(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get serviceToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get serviceFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PositionStorage__getMinCollateralAmountInput_paramsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get baseToken(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get collateral(): Address {
    return this[3].toAddress();
  }

  get baseAmount(): BigInt {
    return this[4].toBigInt();
  }

  get quoteAmount(): BigInt {
    return this[5].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[8].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[9].toBigInt();
  }
}

export class PositionStorage__getQuoteAmountRangeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMinQuoteAmount(): BigInt {
    return this.value0;
  }

  getMaxQuoteAmount(): BigInt {
    return this.value1;
  }
}

export class PositionStorage__getQuoteAmountRangeInput_paramsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get baseToken(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get collateral(): Address {
    return this[3].toAddress();
  }

  get baseAmount(): BigInt {
    return this[4].toBigInt();
  }

  get quoteAmount(): BigInt {
    return this[5].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[8].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[9].toBigInt();
  }
}

export class PositionStorage__openTradePositionInput_posStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get baseToken(): PositionStorage__openTradePositionInput_posBaseTokenStruct {
    return changetype<
      PositionStorage__openTradePositionInput_posBaseTokenStruct
    >(this[3].toTuple());
  }

  get quoteToken(): PositionStorage__openTradePositionInput_posQuoteTokenStruct {
    return changetype<
      PositionStorage__openTradePositionInput_posQuoteTokenStruct
    >(this[4].toTuple());
  }

  get collateral(): PositionStorage__openTradePositionInput_posCollateralStruct {
    return changetype<
      PositionStorage__openTradePositionInput_posCollateralStruct
    >(this[5].toTuple());
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[7].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[8].toBigInt();
  }

  get fee(): BigInt {
    return this[9].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[10].toBigInt();
  }

  get status(): PositionStorage__openTradePositionInput_posStatusStruct {
    return changetype<PositionStorage__openTradePositionInput_posStatusStruct>(
      this[11].toTuple()
    );
  }

  get closer(): Address {
    return this[12].toAddress();
  }

  get liquidationMarkTime(): BigInt {
    return this[13].toBigInt();
  }
}

export class PositionStorage__openTradePositionInput_posBaseTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__openTradePositionInput_posQuoteTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class PositionStorage__openTradePositionInput_posCollateralStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__openTradePositionInput_posStatusStruct extends ethereum.Tuple {
  get isClosed(): boolean {
    return this[0].toBoolean();
  }

  get isRollbacked(): boolean {
    return this[1].toBoolean();
  }

  get isClosedManuallyStep1(): boolean {
    return this[2].toBoolean();
  }

  get isClosedManuallyStep2(): boolean {
    return this[3].toBoolean();
  }
}

export class PositionStorage__positionResultValue0Struct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get baseToken(): PositionStorage__positionResultValue0BaseTokenStruct {
    return changetype<PositionStorage__positionResultValue0BaseTokenStruct>(
      this[3].toTuple()
    );
  }

  get quoteToken(): PositionStorage__positionResultValue0QuoteTokenStruct {
    return changetype<PositionStorage__positionResultValue0QuoteTokenStruct>(
      this[4].toTuple()
    );
  }

  get collateral(): PositionStorage__positionResultValue0CollateralStruct {
    return changetype<PositionStorage__positionResultValue0CollateralStruct>(
      this[5].toTuple()
    );
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[7].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[8].toBigInt();
  }

  get fee(): BigInt {
    return this[9].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[10].toBigInt();
  }

  get status(): PositionStorage__positionResultValue0StatusStruct {
    return changetype<PositionStorage__positionResultValue0StatusStruct>(
      this[11].toTuple()
    );
  }

  get closer(): Address {
    return this[12].toAddress();
  }

  get liquidationMarkTime(): BigInt {
    return this[13].toBigInt();
  }
}

export class PositionStorage__positionResultValue0BaseTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__positionResultValue0QuoteTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class PositionStorage__positionResultValue0CollateralStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__positionResultValue0StatusStruct extends ethereum.Tuple {
  get isClosed(): boolean {
    return this[0].toBoolean();
  }

  get isRollbacked(): boolean {
    return this[1].toBoolean();
  }

  get isClosedManuallyStep1(): boolean {
    return this[2].toBoolean();
  }

  get isClosedManuallyStep2(): boolean {
    return this[3].toBoolean();
  }
}

export class PositionStorage__previewTradePositionResultValue0Struct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get baseToken(): PositionStorage__previewTradePositionResultValue0BaseTokenStruct {
    return changetype<
      PositionStorage__previewTradePositionResultValue0BaseTokenStruct
    >(this[3].toTuple());
  }

  get quoteToken(): PositionStorage__previewTradePositionResultValue0QuoteTokenStruct {
    return changetype<
      PositionStorage__previewTradePositionResultValue0QuoteTokenStruct
    >(this[4].toTuple());
  }

  get collateral(): PositionStorage__previewTradePositionResultValue0CollateralStruct {
    return changetype<
      PositionStorage__previewTradePositionResultValue0CollateralStruct
    >(this[5].toTuple());
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[7].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[8].toBigInt();
  }

  get fee(): BigInt {
    return this[9].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[10].toBigInt();
  }

  get status(): PositionStorage__previewTradePositionResultValue0StatusStruct {
    return changetype<
      PositionStorage__previewTradePositionResultValue0StatusStruct
    >(this[11].toTuple());
  }

  get closer(): Address {
    return this[12].toAddress();
  }

  get liquidationMarkTime(): BigInt {
    return this[13].toBigInt();
  }
}

export class PositionStorage__previewTradePositionResultValue0BaseTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__previewTradePositionResultValue0QuoteTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class PositionStorage__previewTradePositionResultValue0CollateralStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__previewTradePositionResultValue0StatusStruct extends ethereum.Tuple {
  get isClosed(): boolean {
    return this[0].toBoolean();
  }

  get isRollbacked(): boolean {
    return this[1].toBoolean();
  }

  get isClosedManuallyStep1(): boolean {
    return this[2].toBoolean();
  }

  get isClosedManuallyStep2(): boolean {
    return this[3].toBoolean();
  }
}

export class PositionStorage__previewTradePositionInput_paramsStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get baseToken(): Address {
    return this[1].toAddress();
  }

  get quoteToken(): Address {
    return this[2].toAddress();
  }

  get collateral(): Address {
    return this[3].toAddress();
  }

  get baseAmount(): BigInt {
    return this[4].toBigInt();
  }

  get quoteAmount(): BigInt {
    return this[5].toBigInt();
  }

  get collateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[8].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[9].toBigInt();
  }
}

export class PositionStorage__previewUpdateCollateralAmountInput_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__previewUpdateDeadlineResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFee(): BigInt {
    return this.value0;
  }

  getProtocolFee(): BigInt {
    return this.value1;
  }
}

export class PositionStorage__previewUpdateDeadlineInput_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__updateCollateralAmountInput_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage__updateDeadlineResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFee(): BigInt {
    return this.value0;
  }

  getProtocolFee(): BigInt {
    return this.value1;
  }
}

export class PositionStorage__updateDeadlineInput_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class PositionStorage extends ethereum.SmartContract {
  static bind(address: Address): PositionStorage {
    return new PositionStorage("PositionStorage", address);
  }

  canLiquidate(_positionKey: Bytes): boolean {
    let result = super.call("canLiquidate", "canLiquidate(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_positionKey)
    ]);

    return result[0].toBoolean();
  }

  try_canLiquidate(_positionKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("canLiquidate", "canLiquidate(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_positionKey)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canLiquidationMark(_positionKey: Bytes): boolean {
    let result = super.call(
      "canLiquidationMark",
      "canLiquidationMark(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_positionKey)]
    );

    return result[0].toBoolean();
  }

  try_canLiquidationMark(_positionKey: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canLiquidationMark",
      "canLiquidationMark(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_positionKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMinCollateralAmount(
    _params: PositionStorage__getMinCollateralAmountInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "getMinCollateralAmount",
      "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_getMinCollateralAmount(
    _params: PositionStorage__getMinCollateralAmountInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinCollateralAmount",
      "getMinCollateralAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getQuoteAmountRange(
    _params: PositionStorage__getQuoteAmountRangeInput_paramsStruct
  ): PositionStorage__getQuoteAmountRangeResult {
    let result = super.call(
      "getQuoteAmountRange",
      "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return new PositionStorage__getQuoteAmountRangeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getQuoteAmountRange(
    _params: PositionStorage__getQuoteAmountRangeInput_paramsStruct
  ): ethereum.CallResult<PositionStorage__getQuoteAmountRangeResult> {
    let result = super.tryCall(
      "getQuoteAmountRange",
      "getQuoteAmountRange((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionStorage__getQuoteAmountRangeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  openTradePosition(
    _pos: PositionStorage__openTradePositionInput_posStruct
  ): Bytes {
    let result = super.call(
      "openTradePosition",
      "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_pos)]
    );

    return result[0].toBytes();
  }

  try_openTradePosition(
    _pos: PositionStorage__openTradePositionInput_posStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "openTradePosition",
      "openTradePosition((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(_pos)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  poolDeployer(): Address {
    let result = super.call("poolDeployer", "poolDeployer():(address)", []);

    return result[0].toAddress();
  }

  try_poolDeployer(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolDeployer", "poolDeployer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  position(_positionKey: Bytes): PositionStorage__positionResultValue0Struct {
    let result = super.call(
      "position",
      "position(bytes32):((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
      [ethereum.Value.fromFixedBytes(_positionKey)]
    );

    return changetype<PositionStorage__positionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_position(
    _positionKey: Bytes
  ): ethereum.CallResult<PositionStorage__positionResultValue0Struct> {
    let result = super.tryCall(
      "position",
      "position(bytes32):((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
      [ethereum.Value.fromFixedBytes(_positionKey)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PositionStorage__positionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  positionKeyToIndex(param0: Bytes): BigInt {
    let result = super.call(
      "positionKeyToIndex",
      "positionKeyToIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_positionKeyToIndex(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionKeyToIndex",
      "positionKeyToIndex(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionKeys(param0: BigInt): Bytes {
    let result = super.call("positionKeys", "positionKeys(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_positionKeys(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "positionKeys",
      "positionKeys(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  positionLength(): BigInt {
    let result = super.call("positionLength", "positionLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_positionLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionLength",
      "positionLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewTradePosition(
    _params: PositionStorage__previewTradePositionInput_paramsStruct
  ): PositionStorage__previewTradePositionResultValue0Struct {
    let result = super.call(
      "previewTradePosition",
      "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
      [ethereum.Value.fromTuple(_params)]
    );

    return changetype<PositionStorage__previewTradePositionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_previewTradePosition(
    _params: PositionStorage__previewTradePositionInput_paramsStruct
  ): ethereum.CallResult<
    PositionStorage__previewTradePositionResultValue0Struct
  > {
    let result = super.tryCall(
      "previewTradePosition",
      "previewTradePosition((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)):((bytes32,address,address,(address,uint256,uint256,uint256,uint256),(address,uint256),(address,uint256,uint256,uint256,uint256),uint256,uint256,uint256,uint256,uint256,(bool,bool,bool,bool),address,uint256))",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PositionStorage__previewTradePositionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  previewUpdateCollateralAmount(
    _params: PositionStorage__previewUpdateCollateralAmountInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "previewUpdateCollateralAmount",
      "previewUpdateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_previewUpdateCollateralAmount(
    _params: PositionStorage__previewUpdateCollateralAmountInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewUpdateCollateralAmount",
      "previewUpdateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewUpdateDeadline(
    _params: PositionStorage__previewUpdateDeadlineInput_paramsStruct
  ): PositionStorage__previewUpdateDeadlineResult {
    let result = super.call(
      "previewUpdateDeadline",
      "previewUpdateDeadline((bytes32,uint256,address,address,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return new PositionStorage__previewUpdateDeadlineResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_previewUpdateDeadline(
    _params: PositionStorage__previewUpdateDeadlineInput_paramsStruct
  ): ethereum.CallResult<PositionStorage__previewUpdateDeadlineResult> {
    let result = super.tryCall(
      "previewUpdateDeadline",
      "previewUpdateDeadline((bytes32,uint256,address,address,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionStorage__previewUpdateDeadlineResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  updateCollateralAmount(
    _params: PositionStorage__updateCollateralAmountInput_paramsStruct
  ): BigInt {
    let result = super.call(
      "updateCollateralAmount",
      "updateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return result[0].toBigInt();
  }

  try_updateCollateralAmount(
    _params: PositionStorage__updateCollateralAmountInput_paramsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateCollateralAmount",
      "updateCollateralAmount((bytes32,uint256,address,address,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateDeadline(
    _params: PositionStorage__updateDeadlineInput_paramsStruct
  ): PositionStorage__updateDeadlineResult {
    let result = super.call(
      "updateDeadline",
      "updateDeadline((bytes32,uint256,address,address,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );

    return new PositionStorage__updateDeadlineResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_updateDeadline(
    _params: PositionStorage__updateDeadlineInput_paramsStruct
  ): ethereum.CallResult<PositionStorage__updateDeadlineResult> {
    let result = super.tryCall(
      "updateDeadline",
      "updateDeadline((bytes32,uint256,address,address,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(_params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PositionStorage__updateDeadlineResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  updateStatus(_positionKey: Bytes, _updater: Address): boolean {
    let result = super.call(
      "updateStatus",
      "updateStatus(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_positionKey),
        ethereum.Value.fromAddress(_updater)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateStatus(
    _positionKey: Bytes,
    _updater: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateStatus",
      "updateStatus(bytes32,address):(bool)",
      [
        ethereum.Value.fromFixedBytes(_positionKey),
        ethereum.Value.fromAddress(_updater)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class CloseManuallyStep1Call extends ethereum.Call {
  get inputs(): CloseManuallyStep1Call__Inputs {
    return new CloseManuallyStep1Call__Inputs(this);
  }

  get outputs(): CloseManuallyStep1Call__Outputs {
    return new CloseManuallyStep1Call__Outputs(this);
  }
}

export class CloseManuallyStep1Call__Inputs {
  _call: CloseManuallyStep1Call;

  constructor(call: CloseManuallyStep1Call) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseManuallyStep1Call__Outputs {
  _call: CloseManuallyStep1Call;

  constructor(call: CloseManuallyStep1Call) {
    this._call = call;
  }
}

export class CloseManuallyStep2Call extends ethereum.Call {
  get inputs(): CloseManuallyStep2Call__Inputs {
    return new CloseManuallyStep2Call__Inputs(this);
  }

  get outputs(): CloseManuallyStep2Call__Outputs {
    return new CloseManuallyStep2Call__Outputs(this);
  }
}

export class CloseManuallyStep2Call__Inputs {
  _call: CloseManuallyStep2Call;

  constructor(call: CloseManuallyStep2Call) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseManuallyStep2Call__Outputs {
  _call: CloseManuallyStep2Call;

  constructor(call: CloseManuallyStep2Call) {
    this._call = call;
  }
}

export class LiquidationMarkCall extends ethereum.Call {
  get inputs(): LiquidationMarkCall__Inputs {
    return new LiquidationMarkCall__Inputs(this);
  }

  get outputs(): LiquidationMarkCall__Outputs {
    return new LiquidationMarkCall__Outputs(this);
  }
}

export class LiquidationMarkCall__Inputs {
  _call: LiquidationMarkCall;

  constructor(call: LiquidationMarkCall) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class LiquidationMarkCall__Outputs {
  _call: LiquidationMarkCall;

  constructor(call: LiquidationMarkCall) {
    this._call = call;
  }
}

export class OpenTradePositionCall extends ethereum.Call {
  get inputs(): OpenTradePositionCall__Inputs {
    return new OpenTradePositionCall__Inputs(this);
  }

  get outputs(): OpenTradePositionCall__Outputs {
    return new OpenTradePositionCall__Outputs(this);
  }
}

export class OpenTradePositionCall__Inputs {
  _call: OpenTradePositionCall;

  constructor(call: OpenTradePositionCall) {
    this._call = call;
  }

  get _pos(): OpenTradePositionCall_posStruct {
    return changetype<OpenTradePositionCall_posStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class OpenTradePositionCall__Outputs {
  _call: OpenTradePositionCall;

  constructor(call: OpenTradePositionCall) {
    this._call = call;
  }

  get positionKey(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenTradePositionCall_posStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get pool(): Address {
    return this[2].toAddress();
  }

  get baseToken(): OpenTradePositionCall_posBaseTokenStruct {
    return changetype<OpenTradePositionCall_posBaseTokenStruct>(
      this[3].toTuple()
    );
  }

  get quoteToken(): OpenTradePositionCall_posQuoteTokenStruct {
    return changetype<OpenTradePositionCall_posQuoteTokenStruct>(
      this[4].toTuple()
    );
  }

  get collateral(): OpenTradePositionCall_posCollateralStruct {
    return changetype<OpenTradePositionCall_posCollateralStruct>(
      this[5].toTuple()
    );
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[7].toBigInt();
  }

  get takeProfitPrice(): BigInt {
    return this[8].toBigInt();
  }

  get fee(): BigInt {
    return this[9].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[10].toBigInt();
  }

  get status(): OpenTradePositionCall_posStatusStruct {
    return changetype<OpenTradePositionCall_posStatusStruct>(
      this[11].toTuple()
    );
  }

  get closer(): Address {
    return this[12].toAddress();
  }

  get liquidationMarkTime(): BigInt {
    return this[13].toBigInt();
  }
}

export class OpenTradePositionCall_posBaseTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class OpenTradePositionCall_posQuoteTokenStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class OpenTradePositionCall_posCollateralStruct extends ethereum.Tuple {
  get id(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[2].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[3].toBigInt();
  }

  get closePrice(): BigInt {
    return this[4].toBigInt();
  }
}

export class OpenTradePositionCall_posStatusStruct extends ethereum.Tuple {
  get isClosed(): boolean {
    return this[0].toBoolean();
  }

  get isRollbacked(): boolean {
    return this[1].toBoolean();
  }

  get isClosedManuallyStep1(): boolean {
    return this[2].toBoolean();
  }

  get isClosedManuallyStep2(): boolean {
    return this[3].toBoolean();
  }
}

export class RollbackCall extends ethereum.Call {
  get inputs(): RollbackCall__Inputs {
    return new RollbackCall__Inputs(this);
  }

  get outputs(): RollbackCall__Outputs {
    return new RollbackCall__Outputs(this);
  }
}

export class RollbackCall__Inputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _updater(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RollbackCall__Outputs {
  _call: RollbackCall;

  constructor(call: RollbackCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class UpdateCloseValuesCall extends ethereum.Call {
  get inputs(): UpdateCloseValuesCall__Inputs {
    return new UpdateCloseValuesCall__Inputs(this);
  }

  get outputs(): UpdateCloseValuesCall__Outputs {
    return new UpdateCloseValuesCall__Outputs(this);
  }
}

export class UpdateCloseValuesCall__Inputs {
  _call: UpdateCloseValuesCall;

  constructor(call: UpdateCloseValuesCall) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _baseValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _loss(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _remainingCollateralAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateCloseValuesCall__Outputs {
  _call: UpdateCloseValuesCall;

  constructor(call: UpdateCloseValuesCall) {
    this._call = call;
  }
}

export class UpdateCollateralAmountCall extends ethereum.Call {
  get inputs(): UpdateCollateralAmountCall__Inputs {
    return new UpdateCollateralAmountCall__Inputs(this);
  }

  get outputs(): UpdateCollateralAmountCall__Outputs {
    return new UpdateCollateralAmountCall__Outputs(this);
  }
}

export class UpdateCollateralAmountCall__Inputs {
  _call: UpdateCollateralAmountCall;

  constructor(call: UpdateCollateralAmountCall) {
    this._call = call;
  }

  get _params(): UpdateCollateralAmountCall_paramsStruct {
    return changetype<UpdateCollateralAmountCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateCollateralAmountCall__Outputs {
  _call: UpdateCollateralAmountCall;

  constructor(call: UpdateCollateralAmountCall) {
    this._call = call;
  }

  get collateralLiqPrice(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCollateralAmountCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateDeadlineCall extends ethereum.Call {
  get inputs(): UpdateDeadlineCall__Inputs {
    return new UpdateDeadlineCall__Inputs(this);
  }

  get outputs(): UpdateDeadlineCall__Outputs {
    return new UpdateDeadlineCall__Outputs(this);
  }
}

export class UpdateDeadlineCall__Inputs {
  _call: UpdateDeadlineCall;

  constructor(call: UpdateDeadlineCall) {
    this._call = call;
  }

  get _params(): UpdateDeadlineCall_paramsStruct {
    return changetype<UpdateDeadlineCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateDeadlineCall__Outputs {
  _call: UpdateDeadlineCall;

  constructor(call: UpdateDeadlineCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get protocolFee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UpdateDeadlineCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get updater(): Address {
    return this[2].toAddress();
  }

  get serviceToken(): Address {
    return this[3].toAddress();
  }

  get serviceFee(): BigInt {
    return this[4].toBigInt();
  }
}

export class UpdateStatusCall extends ethereum.Call {
  get inputs(): UpdateStatusCall__Inputs {
    return new UpdateStatusCall__Inputs(this);
  }

  get outputs(): UpdateStatusCall__Outputs {
    return new UpdateStatusCall__Outputs(this);
  }
}

export class UpdateStatusCall__Inputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }

  get _positionKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _updater(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateStatusCall__Outputs {
  _call: UpdateStatusCall;

  constructor(call: UpdateStatusCall) {
    this._call = call;
  }

  get needLiquidate(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateTPnSLPriceCall extends ethereum.Call {
  get inputs(): UpdateTPnSLPriceCall__Inputs {
    return new UpdateTPnSLPriceCall__Inputs(this);
  }

  get outputs(): UpdateTPnSLPriceCall__Outputs {
    return new UpdateTPnSLPriceCall__Outputs(this);
  }
}

export class UpdateTPnSLPriceCall__Inputs {
  _call: UpdateTPnSLPriceCall;

  constructor(call: UpdateTPnSLPriceCall) {
    this._call = call;
  }

  get _params(): UpdateTPnSLPriceCall_paramsStruct {
    return changetype<UpdateTPnSLPriceCall_paramsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateTPnSLPriceCall__Outputs {
  _call: UpdateTPnSLPriceCall;

  constructor(call: UpdateTPnSLPriceCall) {
    this._call = call;
  }
}

export class UpdateTPnSLPriceCall_paramsStruct extends ethereum.Tuple {
  get positionKey(): Bytes {
    return this[0].toBytes();
  }

  get takeProfitPrice(): BigInt {
    return this[1].toBigInt();
  }

  get stoplossPrice(): BigInt {
    return this[2].toBigInt();
  }

  get updater(): Address {
    return this[3].toAddress();
  }

  get serviceToken(): Address {
    return this[4].toAddress();
  }

  get serviceFee(): BigInt {
    return this[5].toBigInt();
  }
}
